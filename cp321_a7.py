# -*- coding: utf-8 -*-
"""CP321_A7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z1Qx3-LyzOJQ4raTntwo9LznTkFnylO9
"""

import dash
from dash import Dash, html, dcc, callback, Output, Input
import plotly.express as px
import pandas as pd

data = pd.read_csv("Data.csv")

# merge Germany and West Germany
data["Winners"] = data["Winners"].replace({"West Germany": "Germany"})

# replace England with UK, since plotly does not recognize England as a country, since it is within the sovereign state of UK
data["Winners"] = data["Winners"].replace({"England": "United Kingdom"})

app = Dash(__name__)
server = app.server

marks = {v: str(v) for v in data["Year"]} # marks for the year slider

app.layout = [
    html.H1(children='FIFA Winners Dashboard', style={'textAlign':'center'}),

    # radio buttons used to determine the graph to be shown (ex. View All Winners, will answer 2a. View One Winner... will answer 2b)
    dcc.RadioItems(options=["View All Winners", "View One Winner By Country", "View Winner and Runner-up by Year"], value='View All Winners', id='controls-and-radio-item',
                   style={'display':'flex', 'margin': '20px', 'gap': '10px'}),

    html.Hr(),
    # widgets below facilitate user interaction, allowing users to select by country to answer question 2b, and select by year to answer question 2c.
    # depending on which option is chosen by the radio button, will affect whether a widget will have an affect on the current graph.
    # for example: if "View One Winner By Country" is selected, the Year slider will have no effect, only the country drop down selector would.

    # a country drop down selector for users to pick which country they want to view, when viewing one country at a time
    dcc.Dropdown(data.Winners.unique(), 'Brazil', id='country-selection', style={'margin': '20px'}),

    html.Hr(),

    # a slider to choose the year for the winner and runner-up to be shown
    dcc.Slider(
        min=min(data["Year"]),
        max=max(data["Year"]),
        step=None,
        marks=marks,
        value=min(data["Year"]),
        id='year-slider',
    ),

    html.Hr(),
    dcc.Graph(id='choropleth-graph'),
]

@callback(
    Output('choropleth-graph', 'figure'),
    Input('controls-and-radio-item', 'value'),
    Input('country-selection', 'value'),
    Input('year-slider', 'value')
)

def update_graph(mode, country_option, year_option):
    # For 2a and 2b, filter for only essential data
    winning_years = data.groupby("Winners")["Year"].apply(list).reset_index() # group Winners by country and create a list for all the years they won

    # Calculate number of wins per country by length of the Year column
    winning_years["wins"] = winning_years["Year"].apply(len)

    # Create a string of the years they won to be shown when hovering a country
    winning_years["winning_years_str"] = winning_years["Year"].apply(
                lambda years: ", ".join(map(str, sorted(years)))
            )

    # read radio button value to determine what should be displayed
    if mode == "View All Winners": # show all winners (2a)
        # create graph
        fig = px.choropleth(
            winning_years,
            locations="Winners",
            locationmode="country names",
            color="wins",
            color_continuous_scale="Viridis",
            title="FIFA World Cup Winners (1930-2022)",
            hover_name="Winners",
            hover_data={
                "wins": True,
                "winning_years_str": True,
                "Winners": False  # hide duplicate country name
            },
            labels={  # set custom labels to show wins and string of all years won
                "wins": "Total Wins",
                "winning_years_str": "Years Won"
            }
        )
    elif mode == "View One Winner By Country": # show winner by country (2b)
        winning_country = winning_years[winning_years["Winners"] == country_option]

        fig = px.choropleth(
            winning_country,
            locations="Winners",
            locationmode="country names",
            color="wins",
            color_continuous_scale="Viridis",
            title=f"FIFA World Cup Wins By Country ({country_option})",
            hover_name="Winners",
            hover_data={
                "wins": True,
                "winning_years_str": True,
                "Winners": False # hide duplicate country name
            },
            labels={ # set custom labels to show wins and string of all years won
                "wins": "Total Wins",
                "winning_years_str": "Years Won"
            }
        )
    elif mode == "View Winner and Runner-up by Year": # show winner and runner-up by year (2c)
        # filter row by year
        data_by_year = data[data["Year"] == year_option]
        row_data = data_by_year.iloc[0]

        # create display data
        display_data = pd.DataFrame({
            "country": [row_data["Winners"], row_data["Runners-up"]],
            "Status": ["Winner", "Runner-up"]
        })

        # create graph
        fig = px.choropleth(
            display_data,
            locations="country",
            locationmode="country names",
            color="Status", # color by Status (either winner or runner up)
            color_continuous_scale="Viridis",
            title=f"FIFA World Cup Winner and Runner-up ({year_option})",
            hover_name="country",
            hover_data={
                "Status": True,
                "country": False
            },
        )

    # make figure larger for readability
    fig.update_layout(
      width=1000,
      height=600,
    )


    return fig

if __name__ == '__main__':
  app.run(debug=False)